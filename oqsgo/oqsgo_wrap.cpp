/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: oqsgo.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__oqsgo_314eaa0e274a5d13(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__oqsgo_314eaa0e274a5d13(p);
}



#define SWIG_VERSION 0x040101
#define SWIGGO
#define SWIGMODULE oqsgo
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "oqs/oqs.h"
#include <string>


#include <stdint.h>		// Use the C99 official header


#include <string>


    char *OQS_randombytes(size_t bytes_to_read){
        char *random_string;
        OQS_randombytes((uint8_t*)random_string, bytes_to_read);
        return random_string;
    }


    struct SIG_KEYPAIR_RESULT {
        OQS_STATUS status;
        uint8_t *public_key;
        uint8_t *private_key;
    };

    class OQS_SIGNATURE
    {
    public:
        OQS_SIG *sig_struct;
        bool construct_success;
        const char *method_name;
        const char *alg_version;
        uint8_t claimed_nist_level;
        bool euf_cma;
        size_t length_public_key;
        size_t length_private_key;
        size_t length_signature;

        OQS_SIGNATURE(char *signature_name)
        {
            sig_struct = OQS_SIG_new(signature_name);
            if (sig_struct == NULL) {
                construct_success = false;
                return;
            }
            construct_success = true;
            method_name = sig_struct->method_name;
            alg_version = sig_struct->alg_version;
            claimed_nist_level = sig_struct->claimed_nist_level;
            euf_cma = sig_struct->euf_cma;
            length_public_key = sig_struct->length_public_key;
            length_private_key = sig_struct->length_secret_key;
            length_signature = sig_struct->length_signature;
        }

        ~OQS_SIGNATURE() {
            if (sig_struct != NULL) {
                OQS_SIG_free(sig_struct);
                sig_struct = NULL;
            }
        }

        OQS_STATUS keypair(char *public_key, char *private_key)
        {
            return sig_struct->keypair((uint8_t*)public_key, (uint8_t*)private_key);
        }

        OQS_STATUS sign(char *signature, size_t &signature_len, const char *message, const size_t message_len, const char *private_key)
        {
            return sig_struct->sign((uint8_t*)signature, &signature_len, (uint8_t*)message, message_len, (uint8_t*)private_key);
        }

        OQS_STATUS verify(const char *message, const size_t message_len, const char *signature, const size_t signature_len, const char *public_key)
        {
            return sig_struct->verify((uint8_t*)message, message_len, (uint8_t*)signature, signature_len, (uint8_t*)public_key);
        }
    };


#include <string.h>


    class OQS_KEYENCAPSULATION
    {
    public:
        OQS_KEM *kem_struct;
        bool construct_success;
        const char *method_name;
        const char *alg_version;
        uint8_t claimed_nist_level;
        bool ind_cca;
        size_t length_public_key;
        size_t length_private_key;
        size_t length_ciphertext;
        size_t length_shared_secret;

        OQS_KEYENCAPSULATION(char *kem_name)
        {
            kem_struct = OQS_KEM_new(kem_name);
            if (kem_struct == NULL) {
                construct_success = false;
                return;
            }
            construct_success = true;
            method_name = kem_struct->method_name;
            alg_version = kem_struct->alg_version;
            claimed_nist_level = kem_struct->claimed_nist_level;
            ind_cca = kem_struct->ind_cca;
            length_public_key = kem_struct->length_public_key;
            length_private_key = kem_struct->length_secret_key;
            length_ciphertext = kem_struct->length_ciphertext;
            length_shared_secret = kem_struct->length_shared_secret;
        }

        ~OQS_KEYENCAPSULATION() {
            if (kem_struct != NULL) {
                OQS_KEM_free(kem_struct);
                kem_struct = NULL;
            }
        }

        OQS_STATUS keypair(char *public_key, char *private_key)
        {
            return kem_struct->keypair((uint8_t*)public_key, (uint8_t*)private_key);
        }

        OQS_STATUS encapsulate(char *ciphertext, char *shared_secret, const char *public_key)
        {
            return kem_struct->encaps((uint8_t*)ciphertext, (uint8_t*)shared_secret, (uint8_t*)public_key);
        }

        OQS_STATUS decapsulate(char *shared_secret, const char *ciphertext, const char *private_key)
        {
            return kem_struct->decaps((uint8_t*)shared_secret, (uint8_t*)ciphertext, (uint8_t*)private_key);
        }
    };

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_oqsgo_314eaa0e274a5d13(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_oqsgo_314eaa0e274a5d13(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_OQS_randombytes_oqsgo_314eaa0e274a5d13(long long _swig_go_0) {
  size_t arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (char *)OQS_randombytes(SWIG_STD_MOVE(arg1));
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_OQS_randombytes_switch_algorithm_oqsgo_314eaa0e274a5d13(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (OQS_STATUS)OQS_randombytes_switch_algorithm((char const *)arg1);
  _swig_go_result = (intgo)result; 
  free(arg1); 
  return _swig_go_result;
}


_gostring_ _wrap_OQS_SIG_alg_identifier_oqsgo_314eaa0e274a5d13(long long _swig_go_0) {
  size_t arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (char *)OQS_SIG_alg_identifier(SWIG_STD_MOVE(arg1));
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_OQS_SIG_alg_count_oqsgo_314eaa0e274a5d13() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)OQS_SIG_alg_count();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OQS_SIG_alg_is_enabled_oqsgo_314eaa0e274a5d13(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (int)OQS_SIG_alg_is_enabled((char const *)arg1);
  _swig_go_result = result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_SIG_KEYPAIR_RESULT_status_set_oqsgo_314eaa0e274a5d13(SIG_KEYPAIR_RESULT *_swig_go_0, intgo _swig_go_1) {
  SIG_KEYPAIR_RESULT *arg1 = (SIG_KEYPAIR_RESULT *) 0 ;
  OQS_STATUS arg2 ;
  
  arg1 = *(SIG_KEYPAIR_RESULT **)&_swig_go_0; 
  arg2 = (OQS_STATUS)_swig_go_1; 
  
  if (arg1) (arg1)->status = arg2;
  
}


intgo _wrap_SIG_KEYPAIR_RESULT_status_get_oqsgo_314eaa0e274a5d13(SIG_KEYPAIR_RESULT *_swig_go_0) {
  SIG_KEYPAIR_RESULT *arg1 = (SIG_KEYPAIR_RESULT *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  arg1 = *(SIG_KEYPAIR_RESULT **)&_swig_go_0; 
  
  result = (OQS_STATUS) ((arg1)->status);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_SIG_KEYPAIR_RESULT_public_key_set_oqsgo_314eaa0e274a5d13(SIG_KEYPAIR_RESULT *_swig_go_0, char *_swig_go_1) {
  SIG_KEYPAIR_RESULT *arg1 = (SIG_KEYPAIR_RESULT *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = *(SIG_KEYPAIR_RESULT **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  
  if (arg1) (arg1)->public_key = arg2;
  
}


char *_wrap_SIG_KEYPAIR_RESULT_public_key_get_oqsgo_314eaa0e274a5d13(SIG_KEYPAIR_RESULT *_swig_go_0) {
  SIG_KEYPAIR_RESULT *arg1 = (SIG_KEYPAIR_RESULT *) 0 ;
  uint8_t *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(SIG_KEYPAIR_RESULT **)&_swig_go_0; 
  
  result = (uint8_t *) ((arg1)->public_key);
  *(uint8_t **)&_swig_go_result = (uint8_t *)result; 
  return _swig_go_result;
}


void _wrap_SIG_KEYPAIR_RESULT_private_key_set_oqsgo_314eaa0e274a5d13(SIG_KEYPAIR_RESULT *_swig_go_0, char *_swig_go_1) {
  SIG_KEYPAIR_RESULT *arg1 = (SIG_KEYPAIR_RESULT *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = *(SIG_KEYPAIR_RESULT **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  
  if (arg1) (arg1)->private_key = arg2;
  
}


char *_wrap_SIG_KEYPAIR_RESULT_private_key_get_oqsgo_314eaa0e274a5d13(SIG_KEYPAIR_RESULT *_swig_go_0) {
  SIG_KEYPAIR_RESULT *arg1 = (SIG_KEYPAIR_RESULT *) 0 ;
  uint8_t *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(SIG_KEYPAIR_RESULT **)&_swig_go_0; 
  
  result = (uint8_t *) ((arg1)->private_key);
  *(uint8_t **)&_swig_go_result = (uint8_t *)result; 
  return _swig_go_result;
}


SIG_KEYPAIR_RESULT *_wrap_new_SIG_KEYPAIR_RESULT_oqsgo_314eaa0e274a5d13() {
  SIG_KEYPAIR_RESULT *result = 0 ;
  SIG_KEYPAIR_RESULT *_swig_go_result;
  
  
  result = (SIG_KEYPAIR_RESULT *)new SIG_KEYPAIR_RESULT();
  *(SIG_KEYPAIR_RESULT **)&_swig_go_result = (SIG_KEYPAIR_RESULT *)result; 
  return _swig_go_result;
}


void _wrap_delete_SIG_KEYPAIR_RESULT_oqsgo_314eaa0e274a5d13(SIG_KEYPAIR_RESULT *_swig_go_0) {
  SIG_KEYPAIR_RESULT *arg1 = (SIG_KEYPAIR_RESULT *) 0 ;
  
  arg1 = *(SIG_KEYPAIR_RESULT **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_OQS_SIGNATURE_sig_struct_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, OQS_SIG *_swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  OQS_SIG *arg2 = (OQS_SIG *) 0 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  arg2 = *(OQS_SIG **)&_swig_go_1; 
  
  if (arg1) (arg1)->sig_struct = arg2;
  
}


OQS_SIG *_wrap_OQS_SIGNATURE_sig_struct_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  OQS_SIG *result = 0 ;
  OQS_SIG *_swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result = (OQS_SIG *) ((arg1)->sig_struct);
  *(OQS_SIG **)&_swig_go_result = (OQS_SIG *)result; 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_construct_success_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, bool _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  bool arg2 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->construct_success = arg2;
  
}


bool _wrap_OQS_SIGNATURE_construct_success_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result = (bool) ((arg1)->construct_success);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_method_name_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, _gostring_ _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if (arg2) {
      arg1->method_name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->method_name, (const char *)arg2);
    } else {
      arg1->method_name = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_OQS_SIGNATURE_method_name_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result = (char *) ((arg1)->method_name);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_alg_version_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, _gostring_ _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if (arg2) {
      arg1->alg_version = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->alg_version, (const char *)arg2);
    } else {
      arg1->alg_version = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_OQS_SIGNATURE_alg_version_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result = (char *) ((arg1)->alg_version);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_claimed_nist_level_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, char _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  if (arg1) (arg1)->claimed_nist_level = arg2;
  
}


char _wrap_OQS_SIGNATURE_claimed_nist_level_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result = (uint8_t) ((arg1)->claimed_nist_level);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_euf_cma_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, bool _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  bool arg2 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->euf_cma = arg2;
  
}


bool _wrap_OQS_SIGNATURE_euf_cma_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result = (bool) ((arg1)->euf_cma);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_length_public_key_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, long long _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  size_t arg2 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->length_public_key = arg2;
  
}


long long _wrap_OQS_SIGNATURE_length_public_key_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result =  ((arg1)->length_public_key);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_length_private_key_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, long long _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  size_t arg2 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->length_private_key = arg2;
  
}


long long _wrap_OQS_SIGNATURE_length_private_key_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result =  ((arg1)->length_private_key);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_SIGNATURE_length_signature_set_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, long long _swig_go_1) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  size_t arg2 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->length_signature = arg2;
  
}


long long _wrap_OQS_SIGNATURE_length_signature_get_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  result =  ((arg1)->length_signature);
  _swig_go_result = result; 
  return _swig_go_result;
}


OQS_SIGNATURE *_wrap_new_OQS_SIGNATURE_oqsgo_314eaa0e274a5d13(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  OQS_SIGNATURE *result = 0 ;
  OQS_SIGNATURE *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (OQS_SIGNATURE *)new OQS_SIGNATURE(arg1);
  *(OQS_SIGNATURE **)&_swig_go_result = (OQS_SIGNATURE *)result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_delete_OQS_SIGNATURE_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_OQS_SIGNATURE_keypair_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, _goslice_ _swig_go_1, _goslice_ _swig_go_2) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  {
    if (_swig_go_1.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg2 = (char *) _swig_go_1.array;
  }
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = (char *) _swig_go_2.array;
  }
  
  result = (OQS_STATUS)(arg1)->keypair(arg2,arg3);
  _swig_go_result = (intgo)result; 
  
  
  
  
  return _swig_go_result;
}


intgo _wrap_OQS_SIGNATURE_sign_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, _goslice_ _swig_go_1, long long *_swig_go_2, _gostring_ _swig_go_3, long long _swig_go_4, _goslice_ _swig_go_5) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  char *arg6 = (char *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  {
    if (_swig_go_1.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg2 = (char *) _swig_go_1.array;
  }
  arg3 = *(size_t **)&_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (size_t)_swig_go_4; 
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = (char *) _swig_go_5.array;
  }
  
  result = (OQS_STATUS)(arg1)->sign(arg2,*arg3,(char const *)arg4,arg5,(char const *)arg6);
  _swig_go_result = (intgo)result; 
  
  
  
  free(arg4); 
  
  return _swig_go_result;
}


intgo _wrap_OQS_SIGNATURE_verify_oqsgo_314eaa0e274a5d13(OQS_SIGNATURE *_swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, _goslice_ _swig_go_3, long long _swig_go_4, _goslice_ _swig_go_5) {
  OQS_SIGNATURE *arg1 = (OQS_SIGNATURE *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  char *arg6 = (char *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  arg1 = *(OQS_SIGNATURE **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (size_t)_swig_go_2; 
  {
    if (_swig_go_3.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg4 = (char *) _swig_go_3.array;
  }
  arg5 = (size_t)_swig_go_4; 
  {
    if (_swig_go_5.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg6 = (char *) _swig_go_5.array;
  }
  
  result = (OQS_STATUS)(arg1)->verify((char const *)arg2,arg3,(char const *)arg4,arg5,(char const *)arg6);
  _swig_go_result = (intgo)result; 
  
  
  free(arg2); 
  
  
  return _swig_go_result;
}


_gostring_ _wrap_OQS_KEM_alg_identifier_oqsgo_314eaa0e274a5d13(long long _swig_go_0) {
  size_t arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (char *)OQS_KEM_alg_identifier(SWIG_STD_MOVE(arg1));
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_OQS_KEM_alg_count_oqsgo_314eaa0e274a5d13() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)OQS_KEM_alg_count();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_OQS_KEM_alg_is_enabled_oqsgo_314eaa0e274a5d13(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (int)OQS_KEM_alg_is_enabled((char const *)arg1);
  _swig_go_result = result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_kem_struct_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, OQS_KEM *_swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  OQS_KEM *arg2 = (OQS_KEM *) 0 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = *(OQS_KEM **)&_swig_go_1; 
  
  if (arg1) (arg1)->kem_struct = arg2;
  
}


OQS_KEM *_wrap_OQS_KEYENCAPSULATION_kem_struct_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  OQS_KEM *result = 0 ;
  OQS_KEM *_swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result = (OQS_KEM *) ((arg1)->kem_struct);
  *(OQS_KEM **)&_swig_go_result = (OQS_KEM *)result; 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_construct_success_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, bool _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  bool arg2 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->construct_success = arg2;
  
}


bool _wrap_OQS_KEYENCAPSULATION_construct_success_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result = (bool) ((arg1)->construct_success);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_method_name_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, _gostring_ _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if (arg2) {
      arg1->method_name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->method_name, (const char *)arg2);
    } else {
      arg1->method_name = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_OQS_KEYENCAPSULATION_method_name_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result = (char *) ((arg1)->method_name);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_alg_version_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, _gostring_ _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if (arg2) {
      arg1->alg_version = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->alg_version, (const char *)arg2);
    } else {
      arg1->alg_version = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_OQS_KEYENCAPSULATION_alg_version_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result = (char *) ((arg1)->alg_version);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_claimed_nist_level_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, char _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  if (arg1) (arg1)->claimed_nist_level = arg2;
  
}


char _wrap_OQS_KEYENCAPSULATION_claimed_nist_level_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result = (uint8_t) ((arg1)->claimed_nist_level);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_ind_cca_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, bool _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  bool arg2 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->ind_cca = arg2;
  
}


bool _wrap_OQS_KEYENCAPSULATION_ind_cca_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result = (bool) ((arg1)->ind_cca);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_length_public_key_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, long long _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t arg2 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->length_public_key = arg2;
  
}


long long _wrap_OQS_KEYENCAPSULATION_length_public_key_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result =  ((arg1)->length_public_key);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_length_private_key_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, long long _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t arg2 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->length_private_key = arg2;
  
}


long long _wrap_OQS_KEYENCAPSULATION_length_private_key_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result =  ((arg1)->length_private_key);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_length_ciphertext_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, long long _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t arg2 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->length_ciphertext = arg2;
  
}


long long _wrap_OQS_KEYENCAPSULATION_length_ciphertext_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result =  ((arg1)->length_ciphertext);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_OQS_KEYENCAPSULATION_length_shared_secret_set_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, long long _swig_go_1) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t arg2 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->length_shared_secret = arg2;
  
}


long long _wrap_OQS_KEYENCAPSULATION_length_shared_secret_get_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  result =  ((arg1)->length_shared_secret);
  _swig_go_result = result; 
  return _swig_go_result;
}


OQS_KEYENCAPSULATION *_wrap_new_OQS_KEYENCAPSULATION_oqsgo_314eaa0e274a5d13(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  OQS_KEYENCAPSULATION *result = 0 ;
  OQS_KEYENCAPSULATION *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (OQS_KEYENCAPSULATION *)new OQS_KEYENCAPSULATION(arg1);
  *(OQS_KEYENCAPSULATION **)&_swig_go_result = (OQS_KEYENCAPSULATION *)result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_delete_OQS_KEYENCAPSULATION_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_OQS_KEYENCAPSULATION_keypair_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, _goslice_ _swig_go_1, _goslice_ _swig_go_2) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  {
    if (_swig_go_1.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg2 = (char *) _swig_go_1.array;
  }
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = (char *) _swig_go_2.array;
  }
  
  result = (OQS_STATUS)(arg1)->keypair(arg2,arg3);
  _swig_go_result = (intgo)result; 
  
  
  
  
  return _swig_go_result;
}


intgo _wrap_OQS_KEYENCAPSULATION_encapsulate_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, _goslice_ _swig_go_1, _goslice_ _swig_go_2, _goslice_ _swig_go_3) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  {
    if (_swig_go_1.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg2 = (char *) _swig_go_1.array;
  }
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = (char *) _swig_go_2.array;
  }
  {
    if (_swig_go_3.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg4 = (char *) _swig_go_3.array;
  }
  
  result = (OQS_STATUS)(arg1)->encapsulate(arg2,arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  
  
  
  
  
  
  return _swig_go_result;
}


intgo _wrap_OQS_KEYENCAPSULATION_decapsulate_oqsgo_314eaa0e274a5d13(OQS_KEYENCAPSULATION *_swig_go_0, _goslice_ _swig_go_1, _goslice_ _swig_go_2, _goslice_ _swig_go_3) {
  OQS_KEYENCAPSULATION *arg1 = (OQS_KEYENCAPSULATION *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  OQS_STATUS result;
  intgo _swig_go_result;
  
  arg1 = *(OQS_KEYENCAPSULATION **)&_swig_go_0; 
  {
    if (_swig_go_1.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg2 = (char *) _swig_go_1.array;
  }
  {
    if (_swig_go_2.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg3 = (char *) _swig_go_2.array;
  }
  {
    if (_swig_go_3.len == 0) {
      _swig_gopanic("array must contain at least 1 element");
    }
    arg4 = (char *) _swig_go_3.array;
  }
  
  result = (OQS_STATUS)(arg1)->decapsulate(arg2,(char const *)arg3,(char const *)arg4);
  _swig_go_result = (intgo)result; 
  
  
  
  
  
  
  return _swig_go_result;
}


intgo _wrap_OQS_ERROR_oqsgo_314eaa0e274a5d13() {
  OQS_STATUS result;
  intgo _swig_go_result;
  
  
  result = OQS_ERROR;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OQS_SUCCESS_oqsgo_314eaa0e274a5d13() {
  OQS_STATUS result;
  intgo _swig_go_result;
  
  
  result = OQS_SUCCESS;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OQS_EXTERNAL_LIB_ERROR_OPENSSL_oqsgo_314eaa0e274a5d13() {
  OQS_STATUS result;
  intgo _swig_go_result;
  
  
  result = OQS_EXTERNAL_LIB_ERROR_OPENSSL;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

